@page "/countries"
@inject IRepository Repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="mb-3">
    <h3>Paises</h3>
    <a class="btn btn-primary" href="/countries/create">Nuevo País</a>  
</div>

<GenericList List="Countries">
       <Body>
        <table class="table table-striped text-center">
            <thead>
                <tr>
                    <th>País</th>
                    <th>Estados/ Departamentos</th>
                    <th>Opciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StatesNumber
                        </td>
                        <td>
                            <a href="/countries/details/@country.Id" class="btn btn-info">Detalles</a>
                            <a href="/countries/edit/@country.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
       </Body>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var response = await Repository.Get<List<Country>>("/api/countries");
        Countries = response.Response;
    }

    private async Task DeleteAsync(int id)
    {
        // Ctrl + k + s
        try
        {
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = "estas seguro que deseas eliminar este registro?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "No",
                    ConfirmButtonText = "Si"
                }
            );
            var confirm = !string.IsNullOrEmpty(result.Value);
            if (!confirm) return;
            var responseHttp = await Repository.Delete($"/api/countries/{id}");
            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var message = await responseHttp.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                    return;
                }
            }

            await LoadAsync();
        }
        catch (Exception e)
        {
            await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw;
        }
       
    }
}

       



