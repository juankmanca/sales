@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="onBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>País:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Country.Name" />
            <ValidationMessage For="@(() => Country.Name)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    [EditorRequired]
    [Parameter]
    public Country Country { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool postedSuccessfully { get; set; }

    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Country);
    }

    private async Task onBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModify = editContext.IsModified();
        if(!formWasModify || postedSuccessfully) return;
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
               Title = "Confirmación",
               Text = "Deseas abandonar la pagina y perder los cambios?",
               Icon = SweetAlertIcon.Question,
               ShowCancelButton = true,
               CancelButtonText = "Si",
               ConfirmButtonText = "No"
            }
        );
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm) return;
        context.PreventNavigation();

    }
}
