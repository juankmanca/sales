@page "/"
@using System.Globalization
@inject IRepository Repository
@inject NavigationManager navigationManager
@inject SweetAlertService SweetAlertService

<style type="text/css">
    .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 8px 4px #d3d3d3d1;
        border-radius: 15px;
        font-family: sans-serif;
        margin: 5px;
    }
</style>

@if (Products is null)
{
    <div class="spinner" />
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 5vh;">
        @if (string.IsNullOrWhiteSpace(CategoryFilter))
        {
            <h2>Todas la categorías</h2>
        }
        else
        {
            <h2>Categoría: @CategoryFilter</h2>
        }
    </div>

    if (Categories != null)
    {
        <div class="d-flex flex-wrap justify-content-center  mb-4 mt-2">
            @foreach (var category in Categories)
            {
                <a class="btn btn-link" style="cursor: pointer" @onclick=@(() => LoadAsync(1, category.Name))>@category.Name</a>
            }
            <a class="btn btn-link" style="cursor: pointer" @onclick=@(() => LoadAsync(1, allCategories))>Todos</a>
        </div>
    }

    <div class="d-flex justify-content-center">

        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            <div>
                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar producto..." @bind-value="Filter" />
            </div>
            <div class="mx-1">
                <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
            </div>
            <AuthorizeView>
                <Authorized>
                    @if (counter > 0)
                    {
                        <a href="/Orders/ShowCart" class="btn btn-primary">Ver Carro de Compras (@counter)</a>
                    }
                </Authorized>
            </AuthorizeView>

        </div>
    </div>

    if (Products.Count > 0)
    {
        <div class="d-flex justify-content-center">


            <Pagination CurrentPage="currentPage"
                        TotalPages="totalPages"
                        SelectedPage="SelectedPageAsync" />
        </div>

        <div class="row row-cols-1 row-cols-md-4 g-4 mt-1">
            @foreach (var product in Products!)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="text-center zoom">
                            <img src="@product.MainImage" style="height:150px; max-width:200px;" class="text-center" alt=@product.Name />
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-navy"> @product.Name</h5>
                            <p class="card-text smfnt">@product.Description</p>
                            <h5 class="text-muted">@($"${product.Price.ToString("#,0")}")</h5>
                        </div>
                        <div class="card-footer text-center">
                            <a href="/orders/details/@product.Id" class="btn btn-sm btn-secondary"><i class="oi oi-info" /> Detalles</a>
                            <button class="btn btn-sm btn-primary" @onclick=@(() => AddToCartAsync(product.Id))><i class="oi oi-plus" /> Agregar al Carro</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 30vh;">
            <h1>Lo siento, no hay productos con estos criterios de búsqueda</h1>
        </div>
    }

}

@code {
    private int currentPage = 1;
    private int totalPages;
    private int counter = 0;
    private bool isAuthenticated;
    public List<Product>? Products { get; set; }
    private string allCategories = "all_categories_list";
    public List<Category>? Categories { get; set; }
    public string CategoryFilter { get; set; } = string.Empty;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnParametersSetAsync()
    {
        await CheckIsAuthenticatedAsync();
        await LoadCounterAsync();
        //await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        var responseHttp = await Repository.Get<List<Category>>("api/categories/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }

        Categories = responseHttp.Response;
    }


    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationState = await authenticationStateTask;
        isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    private async Task LoadCounterAsync()
    {
        if (!isAuthenticated)
        {
            return;
        }

        var responseHttp = await Repository.Get<int>("/api/temporalSales/count");
        if (responseHttp.Error)
        {
            return;
        }
        counter = responseHttp.Response;
    }


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page, CategoryFilter);
    }

    private async Task LoadAsync(int page = 1, string category = "")
    {
        if (!string.IsNullOrWhiteSpace(category))
        {
            if (category == allCategories)
            {
                CategoryFilter = string.Empty;
            }
            else
            {
                CategoryFilter = category;
            }
        }

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page);
        if (ok)
        {
            await LoadPagesAsync();
        }
    }

    private async Task LoadPagesAsync()
    {
        var url = $"api/products/totalPages/?RecordsNumber=8";
        if (string.IsNullOrEmpty(Filter))
        {
            url += $"&filter={Filter}";
        }
        if (!string.IsNullOrEmpty(CategoryFilter))
        {
            url += $"&CategoryFilter={CategoryFilter}";
        }

        var response = await Repository.Get<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }


    private async Task<bool> LoadListAsync(int page)
    {
        var url = $"api/products?page={page}&RecordsNumber=8";
        if (!string.IsNullOrEmpty(Filter))
        {
            url += $"&filter={Filter}";
        }
        if (!string.IsNullOrEmpty(CategoryFilter))
        {
            url += $"&CategoryFilter={CategoryFilter}";
        }

        var response = await Repository.Get<List<Product>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        Products = response.Response;
        return true;
    }


    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task AddToCartAsync(int productId)
    {
        if (!isAuthenticated)
        {
            navigationManager.NavigateTo("/Login");
            var toast1 = SweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debes haber iniciado sesión para poder agregar productos al carro de compras.");
            return;
        }

        var temporalSaleDTO = new TemporalSaleDTO
            {
                ProductId = productId
            };

        var httpResponse = await Repository.Post("/api/temporalSales", temporalSaleDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadCounterAsync();

        var toast2 = SweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Producto agregado al carro de compras.");
    }

}
